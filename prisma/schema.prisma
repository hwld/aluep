// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// MySQLに変える
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String                  @id @default(cuid())
  name           String?
  email          String?                 @unique
  emailVerified  DateTime?
  image          String?
  profile        String?                 @db.Text              
  accounts       Account[]
  sessions       Session[]
  appThemes      AppTheme[]
  developers     AppThemeDeveloper[]
  appThemeLikes  AppThemeLike[]
  developerLikes AppThemeDeveloperLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AppTheme {
  id          String                  @id @default(cuid())
  tags        AppThemeTagOnAppTheme[]
  title       String
  description String                  @db.Text
  userId      String
  // とりあえずお題も削除されるようにする
  user        User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  developers AppThemeDeveloper[]
  
  likes AppThemeLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model AppThemeTag {
  id        String                  @id @default(cuid())
  name      String                  @unique
  appThemes AppThemeTagOnAppTheme[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AppThemeTagOnAppTheme {
  themeId String
  theme   AppTheme    @relation(fields: [themeId], references: [id], onDelete: Cascade)
  tagId   String
  tag     AppThemeTag @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@index([themeId])
  @@index([tagId])
  @@id([themeId, tagId])
}

model AppThemeLike {
  id         String   @id @default(cuid())
  appThemeId String
  appTheme   AppTheme @relation(fields: [appThemeId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([appThemeId])
  @@index([userId])
  @@unique([userId, appThemeId])
}

model AppThemeDeveloper {
  id         String                  @id @default(cuid())
  userId     String
  user       User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  appThemeId String
  appTheme   AppTheme                @relation(fields: [appThemeId], references: [id], onDelete: Cascade)
  githubUrl  String
  comment    String                  @db.Text
  likes      AppThemeDeveloperLike[]

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([appThemeId])
  @@unique([userId, appThemeId])
}

model AppThemeDeveloperLike {
  id          String            @id @default(cuid())
  developerId String
  developer   AppThemeDeveloper @relation(fields: [developerId], references: [id], onDelete: Cascade)
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([developerId])
  @@index([userId])
  @@unique([userId, developerId])
}
