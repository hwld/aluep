name: "deploy-to-cloudrun"

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

env:
  TZ: Asia/Tokyo
  IMAGE_REPOSITORY_NAME: asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/aluep/aluep
  IMAGE_NAME: asia-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/aluep/aluep:${{ github.sha }}
  DATABASE_URL: ${{secrets.DATABASE_URL}}

jobs:
  test:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout the repository"
        uses: "actions/checkout@v4"

      - name: "Build db container"
        run: docker compose up -d db

      - name: "Install dependencies"
        run: npm ci

      - name: "Setup test db"
        run: npm run setup:test-db

      - name: "test"
        run: npm run test

  deploy:
    runs-on: "ubuntu-latest"
    needs: test
    permissions:
      id-token: "write"
    steps:
      - name: "Checkout the repository"
        uses: "actions/checkout@v4"

      - uses: "google-github-actions/auth@v1"
        with:
          workload_identity_provider: "projects/860685261660/locations/global/workloadIdentityPools/github-actions-for-deploy/providers/githbu-actions-provider"
          service_account: "github-actions-service@aluep-web.iam.gserviceaccount.com"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: "Configure docker to use the gcloud cli"
        run: gcloud auth configure-docker --quiet asia-northeast1-docker.pkg.dev

      - name: "Database migration"
        run: npx prisma migrate deploy

      # seedを実行するための環境をインストールする
      - name: "Set up ts-node"
        run: npm install -g typescript ts-node

      - name: "Detabase seeding"
        run: npx prisma db seed

      - name: "Build docker image"
        run: >
          docker build
          -t ${{ env.IMAGE_NAME }}
          --build-arg NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}
          --build-arg NEXT_PUBLIC_CONTACT_URL=${{ vars.NEXT_PUBLIC_CONTACT_URL }}
          --build-arg NEXT_PUBLIC_RECAPTCHA_KEY=${{ vars.NEXT_PUBLIC_RECAPTCHA_KEY }}
          .

      - name: "Push docker image"
        run: docker push ${{ env.IMAGE_NAME }}

      - name: "Deploy to Cloud Run"
        uses: "google-github-actions/deploy-cloudrun@v1"
        with:
          service: "aluep"
          image: ${{ env.IMAGE_NAME }}
          region: ${{ secrets.CLOUDRUN_REGION }}

      - name: "Remove docker image"
        uses: "docker://asia-docker.pkg.dev/gcr-cleaner/gcr-cleaner/gcr-cleaner-cli"
        with:
          args: >
            -repo=${{ env.IMAGE_REPOSITORY_NAME }}
            -keep=3
            -tag-filter-any=.*

  notify:
    runs-on: "ubuntu-latest"
    if: always()
    needs: [test, deploy]
    steps:
      # workflowの結果を取得して環境変数に入れる
      - uses: technote-space/workflow-conclusion-action@v3

      - name: "Notify Discord"
        uses: "sarisia/actions-status-discord@v1"
        env:
          DISCORD_WEBHOOK: ${{ secrets.REPORT_DISCORD_WEBHOOK_URL }}
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }}
